DEFINING A Function
-------------------

The general format for defining a function in C++ is:

return_type function_name(parameter list) {
    // function body
}

- return_type: Data type of the output produced by the function. It can be void, indicating that the function doesn't return any value.
- function_name: Name given to the function, following C++ naming conventions.
- parameter list: List of input parameters/arguments that are needed to perform the task. It is optional, you can leave it blank when no parameters are needed.

FUNCTION PROTOTYPES
-------------------

In some cases, you might want to use a function before actually defining it. To do this, you need to declare a function prototype at the beginning of your code.

A function prototype is a declaration of the function without its body, and it informs the compiler about the function's name, return type, and parameters.

	#include <iostream>

	// Function prototype
	int multiplyNumbers(int x, int y);

	int main() {
		int num1 = 3, num2 = 7;
		int result = multiplyNumbers(num1, num2); // Calling the function
		std::cout << "The product is: " << result << '\n';
		return 0;
	}

	// Function definition
	int multiplyNumbers(int x, int y) {
		int product = x * y;
		return product;
	}



LAMBDA FUNCTIONS
----------------

A lambda function, or simply "lambda", is an anonymous (unnamed) function that is defined in place, within your source code, 
and with a concise syntax. Lambda functions were introduced in C++11 and have since become a widely used feature, especially 
in combination with the Standard Library algorithms.

- Syntax

	[capture-list](parameters) -> return_type {
		// function body
	};

	- capture-list: A list of variables from the surrounding scope that the lambda function can access.
	- parameters: The list of input parameters, just like in a regular function. Optional.
	- return_type: The type of the value that the lambda function will return. This part is optional, and the compiler can deduce it in many cases.
	- function body: The code that defines the operation of the lambda function.

- Usage Examples

	Here are a few examples to demonstrate the use of lambda functions in C++:

	- Lambda function with no capture, parameters, or return type.

		auto printHello = []() {
			std::cout << "Hello, World!\n";
		};
		printHello(); // Output: Hello, World!

	- Lambda function with parameters.

		auto add = [](int a, int b) {
			return a + b;
		};
		int result = add(3, 4); // result = 7

	- Lambda function with capture-by-value.

		int multiplier = 3;
		auto times = [multiplier](int a) {
			return a * multiplier;
		};
		int result = times(5); // result = 15

	- Lambda function with capture-by-reference.

		int expiresInDays = 45;
		auto updateDays = [&expiresInDays](int newDays) {
			expiresInDays = newDays;
		};
		updateDays(30); // expiresInDays = 30


*** Note that, when using the capture by reference, any change made to the captured variable inside the lambda function will affect its value in the surrounding scope.