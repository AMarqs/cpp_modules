üß† 8. Otros conceptos importantes
üßº Destructor virtual

Si usas herencia, siempre pon el destructor como virtual en la clase base:

class Base {
public:
    virtual ~Base() {
        cout << "Destructor de Base\n";
    }
};

üß± Composici√≥n

Tener una clase como atributo de otra:

class Motor {
public:
    void encender() {
        cout << "Motor encendido\n";
    }
};

class Coche {
private:
    Motor motor;

public:
    void arrancar() {
        motor.encender();
    }
};

üßπ RAII y punteros inteligentes (std::unique_ptr, std::shared_ptr)

Mejor que usar new y delete directamente.

#include <memory>

class Persona {
public:
    void hablar() {
        cout << "Hablo\n";
    }
};

int main() {
    std::unique_ptr<Persona> p = std::make_unique<Persona>();
    p->hablar();
}

üßæ RESUMEN VISUAL
Concepto	Qu√© hace
Encapsulamiento	Protege datos, acceso controlado con private/public
Getters/Setters	M√©todos para acceder a datos privados
Herencia	Clase hija hereda de clase base
Polimorfismo	Comportamiento distinto usando herencia + punteros
Sobrecarga	Mismo nombre, distintos par√°metros
Clases anidadas	Clases dentro de clases
static	Pertenencia a clase, no al objeto
friend	Acceso a privados desde fuera
Clase abstracta	No se puede instanciar, tiene m√©todos virtuales puros
Interface	Clase abstracta con solo m√©todos puros
RAII	Manejo seguro de recursos usando objetos autom√°ticos
Punteros inteligentes	Alternativa moderna a new/delete